{"ast":null,"code":"import { combineReducers } from \"@reduxjs/toolkit\";\nconst initialState = {\n  sounds: []\n};\nconst soundsReducer = (state = 8, action) => {\n  switch (action.type) {\n    case \"CHANGE_SOUND\":\n      const end = state + 9;\n      if (end > initialState.sounds.length) {\n        return 0;\n      } else {\n        return end;\n      }\n  }\n};\nconst rootReducer = combineReducers({\n  soundindex: soundsReducer,\n  sounds: initialState.sounds.slice(soundindex, soundindex + 9)\n  // Add reducers here\n});\nexport default rootReducer;","map":{"version":3,"names":["combineReducers","initialState","sounds","soundsReducer","state","action","type","end","length","rootReducer","soundindex","slice"],"sources":["/Users/davidwisseh/Documents/drum-machine/src/reducers.js"],"sourcesContent":["import { combineReducers } from \"@reduxjs/toolkit\";\nconst initialState = {\n  sounds: [],\n};\n\nconst soundsReducer = (state = 8, action) => {\n  switch (action.type) {\n    case \"CHANGE_SOUND\":\n      const end = state + 9;\n      if (end > initialState.sounds.length) {\n        return 0;\n      } else {\n        return end;\n      }\n  }\n};\n\nconst rootReducer = combineReducers({\n  soundindex: soundsReducer,\n  sounds: initialState.sounds.slice(soundindex, soundindex + 9),\n  // Add reducers here\n});\n\nexport default rootReducer;\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,kBAAkB;AAClD,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,aAAa,GAAGA,CAACC,KAAK,GAAG,CAAC,EAAEC,MAAM,KAAK;EAC3C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,cAAc;MACjB,MAAMC,GAAG,GAAGH,KAAK,GAAG,CAAC;MACrB,IAAIG,GAAG,GAAGN,YAAY,CAACC,MAAM,CAACM,MAAM,EAAE;QACpC,OAAO,CAAC;MACV,CAAC,MAAM;QACL,OAAOD,GAAG;MACZ;EACJ;AACF,CAAC;AAED,MAAME,WAAW,GAAGT,eAAe,CAAC;EAClCU,UAAU,EAAEP,aAAa;EACzBD,MAAM,EAAED,YAAY,CAACC,MAAM,CAACS,KAAK,CAACD,UAAU,EAAEA,UAAU,GAAG,CAAC;EAC5D;AACF,CAAC,CAAC;AAEF,eAAeD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}