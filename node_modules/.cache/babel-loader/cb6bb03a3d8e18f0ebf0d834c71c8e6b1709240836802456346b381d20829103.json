{"ast":null,"code":"import { combineReducers } from \"@reduxjs/toolkit\";\nconst sounds = [[\"dfsg\"]];\nconst soundsReducer = (state = {\n  sounds: sounds[0],\n  index: 0\n}, action) => {\n  switch (action.type) {\n    case \"CHANGE_SOUND\":\n      const index = state.index + 1;\n      if (index < sounds.length) {\n        return {\n          sounds: sounds[index],\n          index: index\n        };\n      }\n    default:\n      return state;\n  }\n};\nconst rootReducer = combineReducers({\n  sounds: soundsReducer\n\n  // Add reducers here\n});\nexport default rootReducer;","map":{"version":3,"names":["combineReducers","sounds","soundsReducer","state","index","action","type","length","rootReducer"],"sources":["/Users/davidwisseh/Documents/drum-machine/src/reducers.js"],"sourcesContent":["import { combineReducers } from \"@reduxjs/toolkit\";\nconst sounds = [[\"dfsg\"]];\n\nconst soundsReducer = (state = { sounds: sounds[0], index: 0 }, action) => {\n  switch (action.type) {\n    case \"CHANGE_SOUND\":\n      const index = state.index + 1;\n      if (index < sounds.length) {\n        return { sounds: sounds[index], index: index };\n      }\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  sounds: soundsReducer,\n\n  // Add reducers here\n});\n\nexport default rootReducer;\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,kBAAkB;AAClD,MAAMC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC;AAEzB,MAAMC,aAAa,GAAGA,CAACC,KAAK,GAAG;EAAEF,MAAM,EAAEA,MAAM,CAAC,CAAC,CAAC;EAAEG,KAAK,EAAE;AAAE,CAAC,EAAEC,MAAM,KAAK;EACzE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,cAAc;MACjB,MAAMF,KAAK,GAAGD,KAAK,CAACC,KAAK,GAAG,CAAC;MAC7B,IAAIA,KAAK,GAAGH,MAAM,CAACM,MAAM,EAAE;QACzB,OAAO;UAAEN,MAAM,EAAEA,MAAM,CAACG,KAAK,CAAC;UAAEA,KAAK,EAAEA;QAAM,CAAC;MAChD;IACF;MACE,OAAOD,KAAK;EAChB;AACF,CAAC;AAED,MAAMK,WAAW,GAAGR,eAAe,CAAC;EAClCC,MAAM,EAAEC;;EAER;AACF,CAAC,CAAC;AAEF,eAAeM,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}